<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git</title>
    <url>/2023/07/09/git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-分系统控制版本"><a href="#Git-分系统控制版本" class="headerlink" title="Git-分系统控制版本"></a>Git-分系统控制版本</h2><p>###目录<br>[TOC]</p>
<h4 id="三个程序的介绍"><a href="#三个程序的介绍" class="headerlink" title="三个程序的介绍"></a>三个程序的介绍</h4><p><strong>git bash</strong>:linux风格的命令行<br><strong>git cmd</strong>:windows风格的命令行<br><strong>git gui</strong>:图形界面的命令行  </p>
<h4 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h4><p><strong>工作区</strong>：平时存放代码的地方<br><strong>暂存区</strong>：临时存放代码的地方<br><strong>本地仓库</strong>：存放各个版本的数据<br><strong>远程仓库</strong>：github,gitee等</p>
<h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><h5 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><strong>git init</strong></h5><p><strong>git init</strong>:在工作区创建文件</p>
<h5 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><strong>git status</strong></h5><p><strong>git status</strong>:查看所有文件的状态<br>git status [文件名]：查看特定文件状态</p>
<h5 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h5><p><strong>git add .</strong>:提交所有文件到暂存区<br>**git add []**：添加指定文件到暂存区</p>
<h5 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h5><p><strong>git commit -m “消息内容”</strong>:提交暂存区中的信息到本地仓库<br><strong>git commit -a</strong>:提交修改到仓库区</p>
<h5 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><strong>git branch</strong></h5><p><strong>git branch [branch name]</strong>:新建分支，但依然保留在此分支<br><strong>git checkout -b [branch]</strong>:新建分支，并切换<br><strong>git merge [branch]</strong>:合并指定分支到当前分支<br><strong>git branch -d [branch]</strong>:删除指定分支<br><strong>git branch -dr []</strong>:删除远程分支</p>
<h5 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h5><p><strong>git push [remove] [branch]</strong>:上传本地到远程仓库的指定分支</p>
<h5 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h5><p><strong>git pull</strong>:取回远程仓库的变化，并与本地合并</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://gitee.com/all-about-git#%E9%85%8D%E7%BD%AE">命令与用法介绍</a><br><a href="https://oschina.gitee.io/learn-git-branching/">命令的练习</a></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>分系统控制版本</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/07/09/index/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="title-indexdate-2023-07-09-19-48-52tags-introducecategories-personage"><a href="#title-indexdate-2023-07-09-19-48-52tags-introducecategories-personage" class="headerlink" title="title: indexdate: 2023-07-09 19:48:52tags: introducecategories: personage"></a>title: index<br>date: 2023-07-09 19:48:52<br>tags: introduce<br>categories: personage</h2><ul>
<li>👋 Hi, I’m chen</li>
<li>👀 I’m interested in badminton fiction</li>
<li>🌱 I’m currently learning flight control</li>
<li>💞️ I’m looking to collaborate on everthing,welcome to connecting</li>
<li>📫 How to reach me : <a href="mailto:&#x32;&#x37;&#x38;&#x38;&#50;&#x38;&#54;&#56;&#x38;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#x32;&#x37;&#x38;&#x38;&#50;&#x38;&#54;&#56;&#x38;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a></li>
</ul>
<p><strong>近期学习</strong>：</p>
<ul>
<li><p><strong>1.ROS的基本了解和三种通信的学习</strong></p>
</li>
<li><p><strong>2.stm32通信部分复习</strong></p>
</li>
<li><p><strong>3.飞控代码的学习与一些基本的编写</strong></p>
</li>
<li><p><strong>4.无人机各传感器与模块的认识</strong></p>
</li>
<li><p><strong>5.22年电赛飞行任务的编写</strong></p>
</li>
<li><p><strong>6.markdown使用方法的学习</strong></p>
</li>
<li><p><strong>7.git的简单学习</strong></p>
</li>
<li><p>2023.7.16:</p>
</li>
<li><p>1.无人机的通信</p>
</li>
<li><p>2.无人机巡线</p>
</li>
<li><p>3.c语言的复习</p>
</li>
</ul>
<p>-2023.7.21<br>C++第二阶段学习</p>
]]></content>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2023/07/07/markown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录的生成"><a href="#目录的生成" class="headerlink" title="目录的生成"></a>目录的生成</h3><p>[TOC]<br>方法：[]+TOC</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>正文  俩个空格换行–换行</p>
<p>空一行，另起一段 <strong>俩个星号加粗</strong> <em>一个星号字斜了</em>  ** ** * *</p>
<h4 id="自动标序"><a href="#自动标序" class="headerlink" title="自动标序"></a>自动标序</h4><ol>
<li>标号 .空格</li>
<li>自动按序标号<ol>
<li>二级标号<br>ctrl alt v 粘贴图片<br>！[插入文件夹中的图片]</li>
</ol>
</li>
</ol>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>大于号进入引用</p>
<blockquote>
<p>引用的内容 </p>
</blockquote>
<p><strong>引用的结束：</strong> 空行或者新启标题结束</p>
<h4 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h4><ul>
<li>abc</li>
</ul>
<ul>
<li>abc<br>使用方法 -或*+空格+内容</li>
</ul>
<h4 id="任务列表："><a href="#任务列表：" class="headerlink" title="任务列表："></a>任务列表：</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 吃饭</li>
<li><input disabled="" type="checkbox"> 睡觉<br>使用方法 -空格[空格]空格+内容 方框中空格用x替代可勾选</li>
</ul>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>$$<br>ctrl m 连按俩次跳出公式输入<br>$$</p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table>
<thead>
<tr>
<th>小明</th>
<th>大明</th>
<th>姚明</th>
</tr>
</thead>
<tbody><tr>
<td>1.3</td>
<td>2.4</td>
<td>3.4</td>
</tr>
<tr>
<td>1</td>
<td>24</td>
<td>3</td>
</tr>
<tr>
<td>表格的使用</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>—-|：—|—- 左对齐<br> —-|—：|—-右对齐<br>:—:中间对齐<br>shift + alt + f markdown 表格格式化 </p>
<h4 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h4><p>使用方法：！+[]+()  加图片名称<br><img src="/huahua.jpeg"></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>这是一个[链接]<a href="https://www.bilibili.com/">https://www.bilibili.com/</a><br>使用方法：介绍+[链接]+c过来的链接<br><a href="baidu.com">百度</a><br><a href="baidu.com%22%E6%A0%87%E9%A2%98%22">百度</a><br>使用方法：[链接名称]（链接”标题”）</p>
<h5 id="链接标题代码块的加入"><a href="#链接标题代码块的加入" class="headerlink" title="链接标题代码块的加入"></a>链接标题<a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E5%8A%A0%E5%85%A5">代码块的加入</a></h5><p>使用方法：[]+(井号)均填入标题名</p>
<h5 id="ULR"><a href="#ULR" class="headerlink" title="ULR:"></a>ULR:</h5><p><a href="https://baidu.com/">https://baidu.com</a></p>
<h4 id="代码块的加入"><a href="#代码块的加入" class="headerlink" title="代码块的加入"></a>代码块的加入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;javaScript syntax highlighting&quot;</span>;</span><br><span class="line"><span class="title function_">alter</span>(s);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ctrl-k-松开加z进入zen-mode俩下esc退出zen-mode-横线分割"><a href="#ctrl-k-松开加z进入zen-mode俩下esc退出zen-mode-横线分割" class="headerlink" title="ctrl+k 松开加z进入zen mode俩下esc退出zen mode#### 横线分割"></a>ctrl+k 松开加z进入zen mode<br>俩下esc退出zen mode<br>#### 横线分割</h2><p>使用方法三个-</p>
<h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>:s<br>使用方法：：+国际通用表情代码<br><a href="https://unicode.org/emoji/charts/full-emoji-list.html">国际通用表情代码链接</a></p>
<h4 id="角标与下标"><a href="#角标与下标" class="headerlink" title="角标与下标"></a>角标与下标</h4><p>H<del>2</del><br> x^2^<br>使用方法：下标~在数字俩边各一个，角标^在数字俩边各一个</p>
<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p><u>下划线</u><br>使用方法：&lt;+u+&gt;+需要下划线的内容<br></u>下划线结束</p>
<h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;<br>使用方法：&#x3D;&#x3D;+内容+俩个&#x3D;</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>轻量化语言</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/07/07/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>title: Hello World</p>
<hr>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2023/07/16/C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- 
## 前言
C++是一款高运行效率的语言，在之后也将大量使用，因此做了这篇笔记方便之后知识点遗忘后可以查询 -->

<h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><h4 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h4><p>单行注释   &#x2F; 内容 &#x2F;<br>多行注释  &#x2F;* 内容*&#x2F;</p>
<h4 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h4><p><strong>意义</strong>：给一段内存空间取名，方便我们管理内存空间<br><strong>创建语法</strong>：数据类型 变量名 &#x3D; 变量初始值</p>
<h4 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h4><h5 id="宏常量（define）"><a href="#宏常量（define）" class="headerlink" title="宏常量（define）"></a>宏常量（define）</h5><p><strong>使用方法</strong>：#define 常量名 常量值</p>
<h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>const 数据类型 变量名 &#x3D; 变量值</p>
<h4 id="1-5-关键字（标识符）"><a href="#1-5-关键字（标识符）" class="headerlink" title="1.5 关键字（标识符）"></a>1.5 关键字（标识符）</h4><p>c++中具有特定意义，变量常量起名时不可使用</p>
<h4 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h4><p><strong>1.</strong> 不可以使用关键字<br><strong>2.</strong> 命名只可使用下划线，数字，字母<br><strong>3.</strong> 第一个只能是下划线或字母<br><strong>4.</strong> 需要区分大小写<br><strong>给变量起名时应做到见名知意</strong></p>
<h3 id="数据类型与输入"><a href="#数据类型与输入" class="headerlink" title="数据类型与输入"></a>数据类型与输入</h3><h4 id="2-1数据类型"><a href="#2-1数据类型" class="headerlink" title="2.1数据类型"></a>2.1数据类型</h4><p><strong>意义</strong>：给变量分配合适的内存空间</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用空间</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>字符类型</td>
<td>占用大小</td>
<td>取值范围</td>
</tr>
<tr>
<td><strong>short（短整型）</strong></td>
<td>2字节</td>
<td>-2^15^~2^15^-1</td>
</tr>
<tr>
<td><strong>int（整型）</strong></td>
<td>4字节</td>
<td>-2^31^~2^31^-1</td>
</tr>
<tr>
<td><strong>long（长整型）</strong></td>
<td>windows：4 Linux：4（32位） 8（64位）</td>
<td>-2^31^~2^31^-1</td>
</tr>
<tr>
<td><strong>longlong（长长整型）</strong></td>
<td>8字节</td>
<td>-2^63^~2^63^-1</td>
</tr>
</tbody></table>
<h4 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h4><p><strong>作用</strong>：求得数据类型和变量占用的内存空间<br><strong>语法：</strong> sizeof（数据类型&#x2F;变量）</p>
<h4 id="2-3-浮点型（float）"><a href="#2-3-浮点型（float）" class="headerlink" title="2.3 浮点型（float）"></a>2.3 浮点型（float）</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
<th>有效数字范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15-16位有效</td>
</tr>
<tr>
<td>小数计算机默认是double类型,3.14f则变为float类型</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>科学计数法表述小数：</strong> 3e2-&gt;3 * 10^2^  ，3e-2-&gt;3 * 0.1^2^</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h4><p><strong>语法：</strong> char ch &#x3D; ‘a’;<br><strong>注意：</strong> 1.单引号括起来   2.单括号中只可为一位<br><strong>大小:</strong> 一个字符占1个字节<br>字符型对应的ascll码：强转后打印后可得——（int）char<br><strong>a-97</strong><br><strong>A-65</strong></p>
<h4 id="2-5转义字符"><a href="#2-5转义字符" class="headerlink" title="2.5转义字符"></a>2.5转义字符</h4><p><strong>作用：</strong> 用来表示一些不能显示的ascll字符<br><strong>常用转义字符：</strong>换行符：\n &amp;nbsp;反斜杠 \\ &amp;ensp;水平制表符\t——用于整齐的输出数据</p>
<h4 id="2-6字符串"><a href="#2-6字符串" class="headerlink" title="2.6字符串"></a>2.6字符串</h4><p><strong>语法：</strong> char 字符串名 [] &#x3D; “ “(C语言) &amp;nbsp;string 字符串名 [] &#x3D;” “（c++，需要#include<string>）</p>
<h5 id="2-7布尔类型（bool）"><a href="#2-7布尔类型（bool）" class="headerlink" title="2.7布尔类型（bool）"></a>2.7布尔类型（bool）</h5><p>只有俩个数值，true真即1，false假即0，占一个字节<br><strong>语法：</strong> bool falg &#x3D; true;</p>
<h4 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h4><p><strong>作用：</strong> 从键盘上获取数据<br><strong>关键字：</strong> cin<br><strong>语法：</strong> cin &gt;&gt; 变量</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>取余</td>
<td>10%3</td>
<td>1(整数取余保留整数)</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a &#x3D;2；b&#x3D;++a</td>
<td>a&#x3D;3；b&#x3D;3；</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a&#x3D;2；b&#x3D;a++</td>
<td>a&#x3D;3;  b&#x3D;2;</td>
</tr>
<tr>
<td><strong>注：1.</strong> 不可进行小数取余运算</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2.</strong> 前置先进行变量加减，再进行表达式计算，后置先进行表达式计算，后进行变量加减</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="3-2-赋值运算"><a href="#3-2-赋值运算" class="headerlink" title="3.2 赋值运算"></a>3.2 赋值运算</h4><p><strong>符号：</strong>&amp;nbsp; &#x3D; &amp;nbsp;+&#x3D; &amp;nbsp;-&#x3D; &amp;nbsp;*&#x3D; &amp;nbsp; &#x2F;&#x3D;&amp;nbsp;%&#x3D;<br><strong>运算：</strong> a+&#x3D;2;–&gt;a&#x3D;a+2;其他也类似计算</p>
<h4 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h4><p><strong>作用：</strong> 用于表达式的比较，并返回一个真值或假值<br><strong>使用的符号：</strong> &#x3D;&#x3D; &amp;nbsp;！&#x3D;&amp;nbsp;&gt;&#x3D;&amp;nbsp;&lt;&#x3D;</p>
<h4 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h4><p><strong>作用：</strong> 用于根据表达式的值返回真值或假值</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>！a</td>
<td>如果a为假，则!a为真；如果a为真，则！a为假、</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a&amp;&amp;b</td>
<td>如果a和b都为真，则结果为真，否则为假</td>
</tr>
<tr>
<td>&amp;#124;&amp;#124;</td>
<td>或</td>
<td>a&amp;#124;&amp;#124;b</td>
<td>如果a和b中有一个为真则结果为真，二者都为假时，结果为假</td>
</tr>
</tbody></table>
<h3 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h3><h4 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h4><h5 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h5><h6 id="单行if"><a href="#单行if" class="headerlink" title="单行if"></a><strong>单行if</strong></h6><p><strong>作用：</strong> 执行满足条件的语句<br><strong>语法：</strong> if（判断的条件，真则执行，假则不执行）<br>        {<br>            执行的内容<br>        }</p>
<h6 id="多行if"><a href="#多行if" class="headerlink" title="多行if"></a><strong>多行if</strong></h6><p>if（条件）<br>{<br>    成立执行的语句<br>}else<br>{<br>    不成立执行的语句<br>}</p>
<h6 id="多条件if语句"><a href="#多条件if语句" class="headerlink" title="多条件if语句"></a><strong>多条件if语句</strong></h6><p><strong>语法：</strong> if（）{}<br>else if（）<br>{}else if()<br>{}<br>…<br>else{都不满足的执行语句}</p>
<h6 id="if语句的嵌套"><a href="#if语句的嵌套" class="headerlink" title="if语句的嵌套"></a><strong>if语句的嵌套</strong></h6><p><strong>作用：</strong>  做到更精准的条件判断<br>if（条件一）<br>{<br>   &amp;nbsp; if（条件一下进一步的条件）<br>     {</p>
<pre><code>&#125;
</code></pre>
<p>}</p>
<h5 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h5><p><strong>作用：</strong> 通过三目运算符实现简单判断<br><strong>语法：</strong>  表达式？a:b<br>如果表达式为真，执行a，并返回a的值<br>如果表达式为假，执行b，并返回b的值<br><strong>注：</strong> 返回的是变量，可以继续进行赋值操作</p>
<h5 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h5><p><strong>作用:</strong> 执行多分支条件语句<br>switch（a）<br>{<br>   case 1:<br>   {</p>
<p>  }break;（用于跳出执行，否则之后的语句将全部依次执行）<br>   case 2<br>    {</p>
<pre><code>&#125;break;
....
default:
&#123;

&#125;break;
</code></pre>
<p>}<br><strong>注：</strong> switch语句中表达式类型只能是整型或者字符型</p>
<h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><h5 id="4-2-1while-循环语句"><a href="#4-2-1while-循环语句" class="headerlink" title="4.2.1while 循环语句"></a>4.2.1while 循环语句</h5><p><strong>作用：</strong>  满足循环条件，执行循环语句<br><strong>语法：</strong>  whille（循环条件）{循环语句}，只要循环条件为真，就执行循环语句<br><strong>注：</strong> 需要有一个退出循环的出口</p>
<h5 id="4-2-2-do…-while循环语句"><a href="#4-2-2-do…-while循环语句" class="headerlink" title="4.2.2 do….while循环语句"></a>4.2.2 do….while循环语句</h5><p><strong>作用：</strong> 满足条件下，执行循环语句<br><strong>语法：</strong> </p>
<blockquote>
<p>do<br>{<br>执行的语句<br>}<br>while(判断语句)</p>
</blockquote>
<p><strong>注:</strong>  与while的区别为do while会先执行一遍执行语句</p>
<h5 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h5><p><strong>作用：</strong> 执行满足执行条件的语句<br><strong>语法：</strong> </p>
<blockquote>
<p>for（起始表达式；条件表达式；末尾循环体）<br>{<br>    }</p>
</blockquote>
<h5 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h5><p><strong>作用：</strong> 在循环中再嵌套循环，用于解决实际问题</p>
<h4 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h4><h5 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h5><p><strong>作用：</strong> 用于跳出选择结构或者循环结构<br><strong>break的使用时机：</strong><br>1.用于switch语句中，作用是终止case并跳出swich<br>2.出现在循环语句中，作用是跳出当前的循环语句<br>3.出现在嵌套语句中，跳出最近的内层循环</p>
<h5 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h5><p><strong>作用：</strong> 在循环语句中，跳过本次循环中尚未执行的语句，继续执行下一次循环<br><strong>注：</strong> continue跳出的是单次循环，循环并不会结束，break是结束循环</p>
<h5 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h5><p><strong>作用：</strong> 可以无条件跳转语句<br><strong>语法：</strong> </p>
<blockquote>
<p>goto 标记名；<br>…..<br>标记名：</p>
</blockquote>
<h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h3><h5 id="5-1-数组概述"><a href="#5-1-数组概述" class="headerlink" title="5.1 数组概述"></a>5.1 数组概述</h5><p>数组是一个存放了相同类型的数据元素<br><strong>特点：</strong><br>1.数组中的每个数据元素都是相同的数据类型<br>2.数组是由连续的内存位置组成的</p>
<h5 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h5><h6 id="5-2-1-一维数组的定义方式"><a href="#5-2-1-一维数组的定义方式" class="headerlink" title="5.2.1 一维数组的定义方式"></a>5.2.1 一维数组的定义方式</h6><p>1.数组类型 数组名[数组长度];<br>2.数组类型 数组名[数组长度]&#x3D;{值1，值2…..};<br>3.数组类型 数组名[]&#x3D;{值1，值2….}</p>
<h6 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h6><p><strong>用途：</strong><br>1.可以统计整个数组在内存中的长度<br>2.可以获取数组在内存中的首地址</p>
<h4 id="5-3二维数组"><a href="#5-3二维数组" class="headerlink" title="5.3二维数组"></a>5.3二维数组</h4><h5 id="5-3-1-二维数组的定义"><a href="#5-3-1-二维数组的定义" class="headerlink" title="5.3.1 二维数组的定义"></a>5.3.1 二维数组的定义</h5><p><strong>定义方式：</strong><br>1.数组类型 数组名 [行数][列数]；<br>2.数组类型 数组名 [行数][列数] &#x3D; {&amp;nbsp;{数据1，数据2}，{数据3，数据4}&amp;nbsp;}<br>3.数据类型 数组名[行数][列数]&#x3D;{数据1，数据2，数据3，数据4}<br>4.数据类型 数据名[][列数]&#x3D;{数据1，数据2，数据3，数据4}；<br><strong>注：</strong> 可以通过嵌套循环来打出多维数组</p>
<h5 id="5-3-2-二维数组的数组名"><a href="#5-3-2-二维数组的数组名" class="headerlink" title="5.3.2 二维数组的数组名"></a>5.3.2 二维数组的数组名</h5><p>1.可以查看二维数组占用的数据空间 sizeof（数组名）<br>2.二维数组的首地址   cout &lt;&lt; (int)数组名 &lt;&lt;end1</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="6-1-函数概述"><a href="#6-1-函数概述" class="headerlink" title="6.1 函数概述"></a>6.1 函数概述</h4><p>将一段常用的代码封装起来，减少代码的重复</p>
<h4 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h4><p><strong>定义步骤：</strong><br>1.返回值类型<br>2.函数名<br>3.参数列表<br>4.函数体语句<br>5.return表达式 （无返回值时可以不写）<br><strong>语法：</strong></p>
<blockquote>
<p>返回值类型 函数名 （参数列表）<br>{<br>    函数体语句<br>    return表达式<br>}</p>
</blockquote>
<h4 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h4><p><strong>功能：</strong> 使用定义好的函数<br><strong>语法：</strong> 函数名（参数）</p>
<h4 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h4><p><strong>定义：</strong> 就是将函数调用时实参的数值传给形参<br><strong>注：</strong> 形参发生改变不会影响实参<br>形参是再另外取俩个空间，接收实参传递过来的值，因此不会改变实参的值</p>
<h4 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a>6.5 函数的常见样式</h4><p>1.无参无返<br>2.有参有返<br>3.有参无返<br>4.无参有返</p>
<h4 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h4><p>当函数在主函数后，需要写一个声明在主函数前面<br>函数类型 函数名（数据列表）</p>
<h4 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h4><p>1.创建后缀名为.h的头文件<br>2.创建后缀名为.cpp的源文件<br>3.在头文件中写函数的声明<br>4.在源文件中写函数的定义</p>
<h3 id="7-指针"><a href="#7-指针" class="headerlink" title="7. 指针"></a>7. 指针</h3><h4 id="7-1-amp-2-指针的定义与使用"><a href="#7-1-amp-2-指针的定义与使用" class="headerlink" title="7.1&amp;2 指针的定义与使用"></a>7.1&amp;2 指针的定义与使用</h4><p><strong>作用：</strong> 通过指针间接访问一片内存空间<br>一片空间保存着另一片空间的地址，即可实现间接访问<br><strong>指针的定义：</strong> 数据类型 <em>指针变量名 &#x3D; &amp; 记录的变量<br><strong>指针的使用：</strong> 在指针前加</em>表示解引用 等于访问指针所指向的那个变量</p>
<h4 id="7-3-指针所占用的内存空间"><a href="#7-3-指针所占用的内存空间" class="headerlink" title="7.3 指针所占用的内存空间"></a>7.3 指针所占用的内存空间</h4><p>指针在32位操作系统下默认用四个字节保存地址，在64位操作系统下用八个字节保存地址</p>
<h4 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h4><p><strong>空指针：</strong> 指针变量指向内存中编号为0的空间<br><strong>用途：</strong> 用于初始化指针变量<br><strong>注意：</strong> 空指针指向的内存是不可访问的（0-255的空间编号是系统使用的）<br><strong>野指针：</strong> 指针变量指向未知空间</p>
<h4 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h4><p>1.const修饰指针–常量指针<br>2.const修饰常量–指针常量<br>3.const即修饰常量，又修饰指针</p>
<blockquote>
<p>int a &#x3D; 10；<br>int b &#x3D; 10；<br>int *p &#x3D; &amp;a</p>
</blockquote>
<p><strong>常量指针:</strong><br>const int *p &#x3D;&amp;a；<br><strong>特点：</strong> 修饰的是指针，指针的指向可以修改，但指针指向的值不可修改<br><strong>指针常量：</strong><br>int * const p &#x3D; &amp;a;<br><strong>特点：</strong> 修饰的是常量，指针的指向不可以修改，指针的指向的值可以修改<br><strong>即修饰指针，又修饰常量：</strong><br>const int const *p &#x3D; &amp;a；<br>指针的指向和指针指向的值都不可以改变</p>
<h4 id="7-6-指针与数组"><a href="#7-6-指针与数组" class="headerlink" title="7.6 指针与数组"></a>7.6 指针与数组</h4><p>利用指针来访问数组</p>
<blockquote>
<p>int a[10]&#x3D;{}<br>int *p &#x3D; a；<br>p–&gt;a[0]，p++，p–&gt;a[1]<br>p偏移了四个字节</p>
</blockquote>
<h4 id="7-7-指针与函数"><a href="#7-7-指针与函数" class="headerlink" title="7.7 指针与函数"></a>7.7 指针与函数</h4><p><strong>作用：</strong> 利用指针作为函数参数，可以实现实参的改变<br><strong>地址传递：</strong> </p>
<blockquote>
<p>void a （int *p1 ， int *p2）<br>a(&amp;b,&amp;c)</p>
</blockquote>
<p><strong>注：</strong> 因为指针传递的是地址，使用操作的是同一片空间。实参和形参因为操作的表示同一片地址，所以形参的改变并不影响实参的值。</p>
<h3 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8. 结构体"></a>8. 结构体</h3><h4 id="8-1-基本概念"><a href="#8-1-基本概念" class="headerlink" title="8.1 基本概念"></a>8.1 基本概念</h4><p>结构体属于用户自定义的数据类型，允许用户储存不同的数据类型</p>
<h4 id="8-2-结构体的定义和使用"><a href="#8-2-结构体的定义和使用" class="headerlink" title="8.2 结构体的定义和使用"></a>8.2 结构体的定义和使用</h4><p><strong>语法：</strong> struct 结构体名称 {结构体成员列表}；<br><strong>三种创建结构体变量的方式：</strong><br>1.struct 结构体名 变量名<br>2.struct 结构体名 变量名 &#x3D; {成员1，成员2…..}<br>3.定义结构体时顺便定义变量<br><strong>赋值：</strong><br>通过.来给成员赋值,变量名.成员名<br><strong>注：</strong>  创建结构体时struct不可以省略，创建结构体变量时可以省略</p>
<h4 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h4><p><strong>作用：</strong> 将自定义的结构体放入到数组中方便维护<br><strong>语法：</strong> struct 结构体名 数组名[元素个数] &#x3D; </p>
]]></content>
      <categories>
        <category>language note</category>
      </categories>
      <tags>
        <tag>note C++</tag>
      </tags>
  </entry>
</search>
